$$include '../../meta/macros.ptl'

import [mix fallback] from "@iosevka/util"

glyph-module

glyph-block LetterLike-Fraktur-Upper-MNP : begin
	glyph-block-import Common-Derivatives
	glyph-block-import CommonShapes
	glyph-block-import LetterLike-Fraktur-Common : UpperDf S M F T fraktur-stroke change-pen
	glyph-block-import LetterLike-Fraktur-Common : DecoSizeX DecoSizeY SlopeA SlopeB CutMaskLeft
	glyph-block-import LetterLike-Fraktur-Common : Wave FHook PHexTop PHexBot

	define [deriveBoxes box] : begin
		local body : box.padLeft (+1.50 * DecoSizeX)
		local deco : box.padLeft (-0.25 * DecoSizeX)
		return { body deco }

	define [LeftStroke box profile] : glyph-proc
		local { body deco } : deriveBoxes box

		local [knots] : list
			g2.ru.start (post@) ([deco.yp 0.625] - 2 * F.thick) [change-pen F]
			~~~ [Wave.vc Wave.LTDecoSize]
			g2.ru.mid deco.left (post@ <-> DecoSizeY) [change-pen profile]
			arch.rhs (sw -- profile.thick) (blendPre -- null) deco.top 0.4
			flat body.left (pre@ <-> ArchDepthA)
			curl pre@      (post@ <+> ArchDepthB)
			corner (deco.left + 0.5 * DecoSizeX) deco.bot
			corner (pre@ <-> DecoSizeX) (pre@ <+> DecoSizeY)

		local s : include : fraktur-stroke profile [knots]

		return : object
			maskLeft : function [] : fraktur-stroke CutMaskLeft [knots]


	create-glyph 'frak/M' 0x1D510 : glyph-proc
		local df : include : UpperDf para.diversityM 3
		include : df.markSet.capital

		local box : M.box CAP 0 df.leftSB df.rightSB
		local { body deco } : deriveBoxes box

		local leftStroke : include : LeftStroke box M

		local rightStroke : include : fraktur-stroke M
			corner (post@ <+> DecoSizeX) (post@ <+> DecoSizeY)
			corner (body.right + 0.25 * DecoSizeX) body.bottom
			~~~ [straight.up.mid (pre@ <-> Wave.DepthX) [pre@mix@post 0.5]]
			corner (pre@ <+> 0.25 * DecoSizeX) ([body.yp 0.75] + S.thick)
			~~~ [curl [pre@tang-in 1] [pre@tang-in SlopeB]]
			g2 (pre@ <-> 0.75 * Wave.DepthX) [pre@mix@post 0.5]
			arch.rhs (sw -- M.thick) (blendPre -- {}) body.top
			corner (body.xMid - 0.25 * Wave.DepthX) (body.top - 0.5 * Wave.DepthY)
			~~~ [arch.rhs (sw -- M.thick) (blendPre -- {}) (blendPost -- {}) body.top]
			corner body.left pre@

		local middleStroke : include : fraktur-stroke M
			corner (post@ <-> DecoSizeX) (post@ <+> DecoSizeY)
			corner deco.xMid deco.bot
			flat post@     [pre@mix@post 0.5]
			# flat   post@ (pre@ <+> ArchDepthB)
			flat post@     ([body.yp 0.75] + S.thick)
			curl (body.xMid - 0.25 * Wave.DepthX) (body.top - 0.5 * Wave.DepthY)

	create-glyph 'frak/N' 0x1D511 : glyph-proc
		local df : include : UpperDf 1
		include : df.markSet.capital

		local box : S.box CAP 0 df.leftSB df.rightSB
		local { body deco } : deriveBoxes box

		local leftStroke : include : LeftStroke box S

		local rightStroke : include : difference
			fraktur-stroke S
				corner (post@ <+> DecoSizeX) (post@ <+> DecoSizeY)
				corner (body.right + 0.25 * DecoSizeX) body.bottom
				~~~ [straight.up.mid (pre@ <-> Wave.DepthX) [pre@mix@post 0.5]]
				corner pre@ ([body.yp 0.75] + S.thick)
				~~~ [curl [pre@tang-in 1] [pre@tang-in SlopeB]]
				g2 (pre@ <-> Wave.DepthX) [pre@mix@post 0.5]
				arch.rhs (sw -- S.thick) (blendPre -- {}) body.top
				corner (body.left - S.thick) (pre@ <-> ArchDepthA)
			leftStroke.maskLeft
