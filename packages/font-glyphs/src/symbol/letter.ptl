###### Letter-like symbols

$$include '../meta/macros.ptl'

import [Point] from "@iosevka/geometry/point"
import [Box] from "@iosevka/geometry/box"
import [Transform] from "@iosevka/geometry/transform"
import [mix linreg clamp fallback] from "@iosevka/util"
import [DesignParameters] from "../meta/aesthetics.mjs"

glyph-module

glyph-block Symbol-Currency : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared-Shapes : LetterBarOverlay

	create-glyph 'currency' 0xA4 : glyph-proc
		local sw : AdviceStroke 3.5
		local radius : (RightSB - SB) / 2
		include : OShape (SymbolMid + radius * 0.9) (SymbolMid - radius * 0.9) (Middle - radius * 0.9) (Middle + radius * 0.9) sw
		foreach j [range 0 4] : begin
			local angle : Math.PI * (j / 2 + 1 / 4)
			include : dispiro
				widths.center sw
				flat (Middle + radius * 0.87 * [Math.cos angle]) (SymbolMid + radius * 0.87 * [Math.sin angle])
				curl (Middle + radius * Math.SQRT2 * [Math.cos angle]) (SymbolMid + radius * Math.SQRT2 * [Math.sin angle])

	define SterlingConfig : object
		serifless     { 0 }
		motionSerifed { 1 }

	foreach { suffix { serifGrade } } [Object.entries SterlingConfig] : do
		define xBarLeft : [mix SB RightSB 0.2] - Stroke * 0.1
		define [BaseShape] : glyph-proc
			local xBarLeft : [mix SB RightSB 0.2] - Stroke * 0.1
			local hookEndX : Math.max (xBarLeft + [HSwToV : 2.25 * Stroke]) [mix SB RightSB 0.95]
			include : union
				dispiro
					g4 hookEndX (CAP - Hook * 0.85) [widths.lhs]
					hookstart CAP
					flat xBarLeft [CAP - ArchDepthA * 0.75]
					curl xBarLeft [mix Stroke CAP 0.3]
					g4   SB Stroke
				HBar.b SB RightSB 0
			if serifGrade : include : VSerif.ur RightSB 0 VJut

		create-glyph "currency/sterlingSign.\(suffix)" : glyph-proc
			set-width Width
			include : BaseShape
			include : LetterBarOverlay.l xBarLeft (CAP * 0.5)

		create-glyph "currency/liraSymbolSign.\(suffix)" : glyph-proc
			set-width Width
			include : BaseShape
			include : LetterBarOverlay.l xBarLeft (CAP * 0.37)
			include : LetterBarOverlay.l xBarLeft (CAP * 0.60 - OverlayStroke * 0.25)

	select-variant 'currency/sterlingSign'   0xA3
	select-variant 'currency/liraSymbolSign' 0x20A4 (follow -- 'currency/sterlingSign')

glyph-block Symbol-Currency-Letter-Derived : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	derive-composites 'currency/colonSign' 0x20A1 'C' 'dblLongSlash'
	derive-composites 'currency/millSign' 0x20A5 'm' 'shortSlash'

	create-glyph 'currency/overlay/NS' : glyph-proc
		define sw : Math.min OverlayStroke : AdviceStroke2 2 4 CAP
		define gap : Math.max (CAP / 8) (sw / 2)
		include : HBar.b [mix 0 SB 0.5] [mix Width RightSB 0.5] (CAP / 2 + gap / 2) sw
		include : HBar.t    [mix 0 SB 0.5] [mix Width RightSB 0.5] (CAP / 2 - gap / 2) sw

	derive-composites 'currency/nairaSign' 0x20A6 'currency/nairaSignBase' 'currency/overlay/NS'
	derive-composites 'currency/hryvniaSign' 0x20B4 'revS' 'currency/overlay/NS'

	create-glyph 'currency/overlay/W' : glyph-proc
		local df : DivFrame para.diversityM 3
		include : HOverlayBar [mix SB 0 0.7] [mix df.rightSB df.width 0.7] (CAP * 0.6)
		include : HOverlayBar [mix SB 0 0.7] [mix df.rightSB df.width 0.7] (CAP * 0.35)

	derive-composites 'currency/wonSign' 0x20A9 'W' 'currency/overlay/W'

	derive-composites 'currency/dongSign' 0x20AB 'dStroke' 'sbRsbUnderlineBelow'
	derive-composites 'currency/kipSign' 0x20AD 'K' 'hStrike'

	create-glyph 'currency/tugrikOverride' : glyph-proc
		local l : mix (Middle - [HSwToV HalfStroke]) SB       0.75
		local r : mix (Middle + [HSwToV HalfStroke]) RightSB  0.75
		local kSlope 0.05
		set-width 0
		set-mark-anchor 'overlay' [mix l r 0.5] (CAP * 0.5)
		include : intersection [Rect 0 CAP l r] : union
			ExtLineCenter 4 OverlayStroke l (CAP * (0.6 - kSlope)) r (CAP * (0.6 + kSlope))
			ExtLineCenter 4 OverlayStroke l (CAP * (0.35 - kSlope)) r (CAP * (0.35 + kSlope))

	derive-composites 'currency/tugrikSign' 0x20AE 'T' 'currency/tugrikOverride'

	derive-composites 'currency/guaraniSign' 0x20B2 'G' 'longVStrokeOver'
	derive-composites 'currency/cediSign' 0x20B5 'C' 'longVStrokeOver'

	derive-composites 'currency/somSign' 0x20C0 'cyrl/es' 'sbRsbUnderlineBelow'

glyph-block Symbol-Letter : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Latin-X : XStrand
	glyph-block-import Symbol-Geometric-Shared : UnicodeWeightGrade
	glyph-block-import Letter-Shared-Shapes : FlatHookDepth

	alias 'eulerConst' 0x2107 'latn/Epsilon'
	alias 'scruple' 0x2108 'cyrl/E'


	alias 'Ohm' 0x2126 'grek/Omega'
	turned 'Mho' 0x2127 'Ohm' Middle (CAP / 2)

	alias 'letterLike/kelvinSign' 0x212A 'K'

	for-width-kinds WideWidth1 : begin
		create-glyph [MangleName 'estimated'] [MangleUnicode 0x212E] : glyph-proc
			set-width MosaicWidth

			local cx 500
			local cy 450
			local r1 (846 / 2)
			local yGapSize 263
			local sw 183
			local r2 85
			local r3 13
			local swCenter 25

			# Scale and transform
			local desiredHeight : if FMosaicWide CAP XH
			local s : Math.min (desiredHeight / (2 * cy)) ((MosaicWidth - SB) / (2 * cx))
			local glyphCenter : currentGlyph.gizmo.applyXY (MosaicWidth / 2) (desiredHeight / 2)
			local tfm : Transform.Combine
				Transform.Translate (-cx) (-cy)
				Transform.Scale s s
				Transform.Translate glyphCenter.x glyphCenter.y

			# Center of inner round corner, as well as the limit X for the inner circle edge
			local xLargeRc : sw + r2
			local yLargeRc : cy - [Math.sqrt ((r1 - r2) * (r1 - r2) - (cx - sw - r2) * (cx - sw - r2))]
			local xInnerCircleLimit : cx - (cx - xLargeRc) * (r1 / (r1 - r2))

			include : ForceUpright
			include : difference [Ellipse.Outline.At cx cy cx cy]
				# Inner arcs
				intersection [Circle.Outline.At cx cy r1] : union
					Rect (2 * cy) (2 * cy - yLargeRc) xInnerCircleLimit (2 * cx - xInnerCircleLimit)
					Rect yLargeRc (-1) xInnerCircleLimit cx
					Rect (cy - yGapSize) (-1) (cx - 1) (2 * cx)

				# Large round corners
				Circle.Outline.At xLargeRc yLargeRc r2
				Circle.Outline.At xLargeRc (2 * cy - yLargeRc) r2
				Circle.Outline.At (2 * cx - xLargeRc) (2 * cy - yLargeRc) r2

				# Small round corners
				Circle.Outline.At (sw + r3) (cy + swCenter + r3) r3
				Circle.Outline.At (2 * cx - sw - r3) (cy + swCenter + r3) r3
				Circle.Outline.At (sw + r3) (cy - r3) r3

				# Top inner opening
				Rect (2 * cy - yLargeRc) (cy + swCenter + r3) sw (2 * cx - sw)
				Rect (cy + swCenter + r3 + 1) (cy + swCenter) (sw + r3) (2 * cx - sw - r3)

				# Bottom-left opening
				Rect (cy - r3) yLargeRc sw cx
				Rect cy (cy - r3 - 1) (sw + r3) cx

				# Bottom-right opening
				Rect               cy (cy - yGapSize) (cx - 1) (2 * cx)

			include tfm

	create-glyph 'mathAleph' 0x2135 : glyph-proc
		include : MarkSet.capital
		define p 0.3
		include : XStrand true false SB CAP RightSB 0 0.1 0.4 0.28
		include : intersection
			dispiro
				widths.rhs
				g4.down.start RightSB CAP
				g4 [mix SB RightSB p] 0
			spiro-outline
				corner SB CAP
				corner RightSB CAP
				corner RightSB 0
		include : intersection
			dispiro
				widths.rhs
				g4.up.start SB 0
				g4 [mix SB RightSB (1 - p)] CAP
			spiro-outline
				corner SB 0
				corner RightSB 0
				corner SB CAP

	create-glyph 'mathBeth' 0x2136 : glyph-proc
		include : MarkSet.capital
		define pX 0.7
		define pY 0.8
		define turnX : mix SB RightSB pY
		include : dispiro
			widths.rhs
			flat SB CAP
			curl [Math.min (turnX - [HSwToV : 1.5 * Stroke]) [mix SB turnX pX]] CAP
			archv
			flat turnX [Math.min (CAP - Stroke * 1.5) [mix 0 CAP pY]]
			curl turnX 0
		include : HBar.b SB RightSB 0

	create-glyph 'mathGimel' 0x2137 : glyph-proc
		local df : include : DivFrame para.diversityF
		local hd : FlatHookDepth df

		local xStart : mix df.leftSB df.rightSB 0.1
		local xVertBar : [mix df.leftSB df.rightSB 0.625] + [HSwToV : 0.375 * Stroke]
		local yBranch : mix 0 CAP 0.5

		include : df.markSet.capital

		include : intersection [MaskAbove 0] : dispiro [widths.rhs]
			flat xStart CAP
			curl [Math.max (xStart + TINY) (xVertBar - hd.x)] CAP
			archv
			flat xVertBar (CAP - hd.y)
			curl xVertBar yBranch
			flat df.rightSB 0
			curl [mix xVertBar df.rightSB 2] [mix yBranch 0 2]

		include : dispiro [widths.rhs]
			g4.down.start xVertBar yBranch
			g4 (df.leftSB + [HSwToV : 0.2 * Stroke]) O

	create-glyph 'mathDalet' 0x2138 : glyph-proc
		include : MarkSet.capital
		include : HBar.t SB RightSB CAP
		include : VBar.r [mix SB RightSB 0.75] 0 CAP

	create-glyph 'informationSource' 0x2139 : glyph-proc
		include : MarkSet.b
		local sw : UnicodeWeightGrade 9 1
		include : VBar.m Middle 0 XH sw
		include : HSerif.lt (Middle - [HSwToV : 0.5 * sw]) XH (LongJut / 2)
		include : HSerif.lb (Middle - [HSwToV : 0.5 * sw]) 0  (LongJut / 2)
		include : HSerif.rb (Middle + [HSwToV : 0.5 * sw]) 0  (LongJut / 2)
		include : DotAt Middle (XH + AccentStackOffset) (DotRadius * sw / Stroke)

	turned 'turnAmpersand' 0x214B 'ampersand' Middle (CAP / 2)

	do "Tironian Et"
		define [TironianEtTopBarShape y] : intersection
			Rect (y - O) 0 SB RightSB
			dispiro
				widths.rhs
				g4 (SB + O) (y - O)
				g4 Middle (y + O)
				g4 RightSB (y - O)

		create-glyph 'tironianEt' 0x204A : glyph-proc
			include : TironianEtTopBarShape XH
			include : intersection
				Rect (XH - O - Stroke) (-Stroke) SB RightSB
				dispiro
					widths.rhs
					flat RightSB (XH - O - Stroke)
					curl (Middle + [HSwToV : 0.125 * Stroke]) O

		create-glyph 'TironianEt' 0x2E52 : glyph-proc
			include : TironianEtTopBarShape CAP
			include : dispiro
				widths.rhs
				flat RightSB (CAP - HalfStroke) [heading Downward]
				curl RightSB ArchDepthB
				hookend 0
				g4 SB Hook

	do "Roman Numerals"
		create-glyph 'romanFiftyEarlyForm' 0x2186 : glyph-proc
			include : MarkSet.capital
			include : VBar.m Middle 0 CAP
			include : dispiro
				flat (Middle - [HSwToV HalfStroke]) 0 [widths.rhs : AdviceStroke 3]
				curl (SB + O) [mix 0 CAP 0.375]
			include : dispiro
				flat (Middle + [HSwToV HalfStroke]) 0 [widths.lhs : AdviceStroke 3]
				curl (RightSB - O) [mix 0 CAP 0.375]

	do "Tally Marks"
		create-glyph 'tallyMarkOne' 0x1D377 : glyph-proc
			local df : include : DivFrame : if (para.diversityII < 1) ([mix 1 para.diversityM 2] / 4) 1
			include : df.markSet.capital
			include : VBar.m df.middle 0 CAP df.mvs

		create-glyph 'tallyMarkFive' 0x1D378 : glyph-proc
			local df : include : DivFrame [mix 1 para.diversityM 2] 4
			include : df.markSet.capital

			local left  : df.leftSB  + [HSwToV : 0.5 * df.mvs]
			local right : df.rightSB - [HSwToV : 0.5 * df.mvs]

			include : VBar.m      left              0 CAP df.mvs
			include : VBar.m [mix left right (1/3)] 0 CAP df.mvs
			include : VBar.m [mix left right (2/3)] 0 CAP df.mvs
			include : VBar.m           right        0 CAP df.mvs

			include : dispiro
				flat (left  - LongJut / 2 + OX) (CAP * (1/3)) [widths.center df.mvs]
				curl (right + LongJut / 2 - OX) (CAP * (2/3))

glyph-block Symbol-Cyrl-Thousands : begin
	glyph-block-import CommonShapes
	create-glyph 'cyrlThousandsSign' 0x482 : glyph-proc
		define fine : AdviceStroke 3
		include : ExtLineCenter (-0.1) fine SB Descender RightSB XH
		include : ExtLineCenter (-0.1) fine [mix SB RightSB 0.1] [mix Descender XH 0.8] [mix SB RightSB 1.1] [mix Descender XH 0.5]
		include : ExtLineCenter (-0.1) fine [mix SB RightSB (-0.1)] [mix Descender XH 0.5] [mix SB RightSB 0.9] [mix Descender XH 0.2]

glyph-block Symbol-Letter-Phonetic : begin
	glyph-block-import CommonShapes
	glyph-block-import Mark-Above : BreveShape InvBreveShape
	glyph-block-import Mark-Shared-Metrics : markExtend markHalfStroke

	create-glyph 'modifierArchBreve' 0xAB5B : glyph-proc
		include : MarkSet.e
		local archHeight : XH * 0.45

		include : dispiro
			widths.rhs
			g4.up.start (SB + OX) 0 [heading Upward]
			arch.rhs archHeight
			g4.down.end (RightSB - OX) 0 [heading Downward]

		include : dispiro
			widths.lhs
			g4.down.start (SB + OX) XH [heading Downward]
			arch.lhs (XH - archHeight)
			g4.up.end (RightSB - OX) XH [heading Upward]

	create-glyph 'cyrlInvLowKavykaWithKavyka' 0x2E46 : glyph-proc
		include : MarkSet.e

		include : BreveShape
			xMiddle -- Middle
			width   -- markExtend * 3.0
			top     -- XH
			bottom  -- XH - AccentHeight
			hs      -- markHalfStroke

		include : InvBreveShape
			xMiddle -- Middle
			width   -- markExtend * 3.0
			top     -- AccentHeight
			bottom  -- 0
			hs      -- markHalfStroke
